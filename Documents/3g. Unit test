In Extreme Programming (XP), unit testing is a fundamental practice that ensures individual components of the software work correctly. Here’s an example:

Scenario: Implementing a calculateTotal method in a ShoppingCart class.

Step 1: Write a unit test before writing the code. In XP, this is known as Test-Driven Development (TDD). The test ensures the method calculates the total correctly.

Example Test Code (in a fictional programming language):

class ShoppingCartTest:
    def test_calculateTotal(self):
        cart = ShoppingCart()
        cart.addItem("Book", 10.99)
        cart.addItem("Toy", 5.99)
        assertEquals(16.98, cart.calculateTotal())

Step 2: Run the test and observe it fails, as the calculateTotal method doesn’t exist yet.

Step 3: Write the minimal code necessary to pass the test. In this case, the calculateTotal method is implemented:

class ShoppingCart:
    def calculateTotal(self):
        total = 0
        for item in self.items:
            total += item.getPrice()
        return total

Step 4: Run the test again, and it should pass, verifying the calculateTotal method works correctly.

Key Takeaways:

- In XP, unit tests are written before writing the code.
- The test ensures the code behaves as expected, providing immediate feedback.
- The code is written to pass the test, ensuring it meets the required functionality.
- This iterative process of writing tests and code improves the quality and reliability of the software.

Additional Resources:

- Extreme Programming Explained (book) by Kent Beck
- XP Rules (website) by Don Wells
- Agile Manifesto (document) outlining the principles and values of Agile software development, including Extreme Programming.